Array List vs. Linked List
The main benefit of a linked list over am Array List is when you want to use an iterator
to remove or add elements.

    get(int index) is O(n) (with n/4 steps on average)
    add(E element) is O(1)
    add(int index, E element) is O(n) (with n/4 steps on average), but O(1) when index = 0 <--- main benefit of LinkedList<E>
    remove(int index) is O(n) (with n/4 steps on average)
    Iterator.remove() is O(1). <--- main benefit of LinkedList<E>
    ListIterator.add(E element) is O(1) This is one of the main benefits of LinkedList<E>

Array List vs. Linked List
The main benefit of an array list is when you want to get the index of elements

    get(int index) is O(1) <--- main benefit of ArrayList<E>
    add(E element) is O(1) amortized, but O(n) worst-case since the array must be resized and copied
    add(int index, E element) is O(n) (with n/2 steps on average)
    remove(int index) is O(n) (with n/2 steps on average)
    Iterator.remove() is O(n) (with n/2 steps on average)
    ListIterator.add(E element) is O(n) (with n/2 steps on average)
    
 Array vs. Array List
 When you want a fixed size use array over Linked List and Array List.
 Arrays are not dynamic meaning their size doesn't change.
 Arraylists are part of the List interface in Java, so they have their own methods
 
 Array vs. Linked List
 Accessing elements in an array is faster than a linked list because you don't have to access nodes
 
 Array vs. Linked List
 Benefits of Linked List
1) Dynamic size
2) Ease of insertion/deletion
disadvantages of linked list
1) Random access is not allowed. We have to access elements sequentially starting from the first node. 
So we cannot do a binary search with linked lists.
2) Extra memory space for a pointer is required with each element of the list.
3) Arrays have better cache locality that can make a pretty big difference in performance. 

Hash Table vs array
When you want to get an element in a hash table the time is O(1), but when you want
to get an element in an array the time is O(n)

