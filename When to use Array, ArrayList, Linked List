The main benefit of a linked list over am Array List is when you want to use an iterator
to remove or add elements.

    get(int index) is O(n) (with n/4 steps on average)
    add(E element) is O(1)
    add(int index, E element) is O(n) (with n/4 steps on average), but O(1) when index = 0 <--- main benefit of LinkedList<E>
    remove(int index) is O(n) (with n/4 steps on average)
    Iterator.remove() is O(1). <--- main benefit of LinkedList<E>
    ListIterator.add(E element) is O(1) This is one of the main benefits of LinkedList<E>


The main benefit of an array list is when you want to get the index of elements

    get(int index) is O(1) <--- main benefit of ArrayList<E>
    add(E element) is O(1) amortized, but O(n) worst-case since the array must be resized and copied
    add(int index, E element) is O(n) (with n/2 steps on average)
    remove(int index) is O(n) (with n/2 steps on average)
    Iterator.remove() is O(n) (with n/2 steps on average)
    ListIterator.add(E element) is O(n) (with n/2 steps on average)
    
 When you want a fixed size use array over Linked List and Array List.
 Array Lists are not dynamic meaning their size doesn't change.
 Arraylists are part of the List interface in Java
